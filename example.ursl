// Note that this file is only testing grammar features and making sure everything parses fine. The example.ursl in the actual compiler repo (https://github.com/Terrain2/URSL/blob/main/example.ursl) is more up-to-date and meant to *validate* successfully and compile fine without errors too.

bits 64
minstack 200
minheap 0

.str [ 'H' 'e' 'l' 'l' 'o' ',' 0x20 'W' 'o' 'r' 'l' 'd' ]
.escape '\n'
.num 0x20
.nums [ 1 2 3 4 /* ... */ @MAX ]

inst nop [] -> []
inst pop [a] -> []
inst dup [a] -> [a a]
inst swap [a b] -> [b a]
inst rot [a b c] -> [c b a]
inst over [a b] -> [a b a]

func $main {
    const 0
    const $fib
    perm [a b] -> [b a]
    icall 1 -> 1
    out %NUMB
}

func $fib 1 -> 1 {
    get 0
    const 0
    eq branch :base_case

    get 0
    const 1
    eq branch :base_case

    get 0
    const 1
    sub
    call $fib

    get 0
    const 2
    sub
    call $fib

    add
    ret

    height 0
    label :base_case
    get 0
    ret
}

inst example <X> -> $0 {
    :a IMM $0 #0
    :a JMP :a

    :a BR :a $0 $0
    :a BR :a $0

    :a ADD $0 $0 $0
    :a INC $0 $0

    IN $0 %NUMB
    OUT %NUMB $1
}

inst equal <A> -> <A> {
    SETE $1 $1 $2
} branch :dest {
    BRE :dest &1 &2
}

inst mult 2 -> 1 {
    :start
    BNZ :$ $3
    ADD $1 $1 $2
    DEC $3 $3
    JMP :start
}

func $bindings {
    perm [a b] -> [b a]
}